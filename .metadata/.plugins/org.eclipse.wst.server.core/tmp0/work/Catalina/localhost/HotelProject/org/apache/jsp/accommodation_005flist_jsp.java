/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.105
 * Generated at: 2025-06-05 08:04:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.sql.*;
import org.json.*;

public final class accommodation_005flist_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(7);
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("org.json");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"ko\">\r\n");
      out.write("<head>\r\n");
      out.write("  <meta charset=\"UTF-8\">\r\n");
      out.write("  <title>숙박 목록</title>\r\n");
      out.write("  <style>\r\n");
      out.write("    body {\r\n");
      out.write("      font-family: 'Malgun Gothic', sans-serif;\r\n");
      out.write("      margin: 0;\r\n");
      out.write("      padding: 20px;\r\n");
      out.write("      background-color: #f5f5f5;\r\n");
      out.write("    }\r\n");
      out.write("    .container {\r\n");
      out.write("      max-width: 1200px;\r\n");
      out.write("      margin: 0 auto;\r\n");
      out.write("    }\r\n");
      out.write("    h1 {\r\n");
      out.write("      text-align: center;\r\n");
      out.write("      color: #333;\r\n");
      out.write("      margin-bottom: 30px;\r\n");
      out.write("    }\r\n");
      out.write("    .search-box {\r\n");
      out.write("      text-align: center;\r\n");
      out.write("      margin-bottom: 20px;\r\n");
      out.write("    }\r\n");
      out.write("    .search-box input {\r\n");
      out.write("      padding: 10px;\r\n");
      out.write("      width: 300px;\r\n");
      out.write("      border: 2px solid #ddd;\r\n");
      out.write("      border-radius: 5px;\r\n");
      out.write("      font-size: 16px;\r\n");
      out.write("    }\r\n");
      out.write("    .search-box button {\r\n");
      out.write("      padding: 10px 20px;\r\n");
      out.write("      background-color: #007bff;\r\n");
      out.write("      color: white;\r\n");
      out.write("      border: none;\r\n");
      out.write("      border-radius: 5px;\r\n");
      out.write("      cursor: pointer;\r\n");
      out.write("      font-size: 16px;\r\n");
      out.write("      margin-left: 10px;\r\n");
      out.write("    }\r\n");
      out.write("    .search-box button:hover {\r\n");
      out.write("      background-color: #0056b3;\r\n");
      out.write("    }\r\n");
      out.write("    .card {\r\n");
      out.write("      background: white;\r\n");
      out.write("      border: 1px solid #ddd;\r\n");
      out.write("      padding: 20px;\r\n");
      out.write("      margin: 15px 0;\r\n");
      out.write("      border-radius: 10px;\r\n");
      out.write("      box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n");
      out.write("      display: flex;\r\n");
      out.write("      gap: 20px;\r\n");
      out.write("    }\r\n");
      out.write("    .card:hover {\r\n");
      out.write("      box-shadow: 0 4px 15px rgba(0,0,0,0.2);\r\n");
      out.write("      transform: translateY(-2px);\r\n");
      out.write("      transition: all 0.3s ease;\r\n");
      out.write("    }\r\n");
      out.write("    .card-image {\r\n");
      out.write("      flex-shrink: 0;\r\n");
      out.write("      width: 200px;\r\n");
      out.write("      height: 150px;\r\n");
      out.write("    }\r\n");
      out.write("    .card-image img {\r\n");
      out.write("      width: 100%;\r\n");
      out.write("      height: 100%;\r\n");
      out.write("      object-fit: cover;\r\n");
      out.write("      border-radius: 8px;\r\n");
      out.write("    }\r\n");
      out.write("    .card-content {\r\n");
      out.write("      flex: 1;\r\n");
      out.write("    }\r\n");
      out.write("    .card-title {\r\n");
      out.write("      font-size: 18px;\r\n");
      out.write("      font-weight: bold;\r\n");
      out.write("      color: #333;\r\n");
      out.write("      margin-bottom: 10px;\r\n");
      out.write("    }\r\n");
      out.write("    .card-info {\r\n");
      out.write("      color: #666;\r\n");
      out.write("      line-height: 1.6;\r\n");
      out.write("    }\r\n");
      out.write("    .card-info p {\r\n");
      out.write("      margin: 5px 0;\r\n");
      out.write("    }\r\n");
      out.write("    .no-image {\r\n");
      out.write("      background-color: #f0f0f0;\r\n");
      out.write("      display: flex;\r\n");
      out.write("      align-items: center;\r\n");
      out.write("      justify-content: center;\r\n");
      out.write("      color: #999;\r\n");
      out.write("      border-radius: 8px;\r\n");
      out.write("    }\r\n");
      out.write("    .pagination {\r\n");
      out.write("      text-align: center;\r\n");
      out.write("      margin: 30px 0;\r\n");
      out.write("    }\r\n");
      out.write("    .pagination button {\r\n");
      out.write("      margin: 0 5px;\r\n");
      out.write("      padding: 8px 15px;\r\n");
      out.write("      cursor: pointer;\r\n");
      out.write("      border: 1px solid #ddd;\r\n");
      out.write("      background-color: white;\r\n");
      out.write("      border-radius: 5px;\r\n");
      out.write("      font-size: 14px;\r\n");
      out.write("    }\r\n");
      out.write("    .pagination button:hover {\r\n");
      out.write("      background-color: #f8f9fa;\r\n");
      out.write("    }\r\n");
      out.write("    .pagination button.active {\r\n");
      out.write("      background-color: #007bff;\r\n");
      out.write("      color: white;\r\n");
      out.write("      border-color: #007bff;\r\n");
      out.write("      font-weight: bold;\r\n");
      out.write("    }\r\n");
      out.write("    .loading {\r\n");
      out.write("      text-align: center;\r\n");
      out.write("      padding: 50px;\r\n");
      out.write("      font-size: 18px;\r\n");
      out.write("      color: #666;\r\n");
      out.write("    }\r\n");
      out.write("  </style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("  <div class=\"container\">\r\n");
      out.write("    <h1>🏨 숙박 목록</h1>\r\n");
      out.write("    \r\n");
      out.write("    <div class=\"search-box\">\r\n");
      out.write("      <input type=\"text\" id=\"searchInput\" placeholder=\"숙박 이름 또는 주소로 검색...\" onkeypress=\"handleEnter(event)\">\r\n");
      out.write("      <button onclick=\"searchAccommodation()\">검색</button>\r\n");
      out.write("      <button onclick=\"resetSearch()\">전체보기</button>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    <div id=\"accommodation-list\" class=\"loading\">데이터를 불러오는 중...</div>\r\n");
      out.write("    <div class=\"pagination\" id=\"pagination\"></div>\r\n");
      out.write("  </div>\r\n");
      out.write("\r\n");
      out.write("  <script>\r\n");
      out.write("    ");

    // DB 연결 정보
    String url = "jdbc:mysql://localhost:3306/tour?useSSL=false&serverTimezone=UTC";
    String username = "root";
    String password = "hahs884312~"; // 실제 비밀번호로 변경하세요
    
    Connection conn = null;
    PreparedStatement pstmt = null;
    ResultSet rs = null;
    
    JSONArray jsonArray = new JSONArray();
    
    try {
        // MySQL JDBC 드라이버 로드
        Class.forName("com.mysql.cj.jdbc.Driver");
        
        // DB 연결
        conn = DriverManager.getConnection(url, username, password);
        
        // 검색어 파라미터 확인
        String searchKeyword = request.getParameter("search");
        String sql;
        
        if (searchKeyword != null && !searchKeyword.trim().isEmpty()) {
            sql = "SELECT * FROM lodgment WHERE title LIKE ? OR addr1 LIKE ? ORDER BY id";
            pstmt = conn.prepareStatement(sql);
            String searchPattern = "%" + searchKeyword.trim() + "%";
            pstmt.setString(1, searchPattern);
            pstmt.setString(2, searchPattern);
        } else {
            sql = "SELECT * FROM lodgment ORDER BY id";
            pstmt = conn.prepareStatement(sql);
        }
        
        rs = pstmt.executeQuery();
        
        while (rs.next()) {
            JSONObject item = new JSONObject();
            item.put("id", rs.getInt("id"));
            item.put("title", rs.getString("title") != null ? rs.getString("title") : "");
            item.put("addr1", rs.getString("addr1") != null ? rs.getString("addr1") : "");
            item.put("tel", rs.getString("tel") != null ? rs.getString("tel") : "");
            item.put("firstimage", rs.getString("firstimage") != null ? rs.getString("firstimage") : "");
            jsonArray.put(item);
        }
        
    } catch (Exception e) {
        out.println("// 데이터베이스 오류: " + e.getMessage());
        e.printStackTrace();
    } finally {
        if (rs != null) try { rs.close(); } catch (SQLException e) {}
        if (pstmt != null) try { pstmt.close(); } catch (SQLException e) {}
        if (conn != null) try { conn.close(); } catch (SQLException e) {}
    }
    
      out.write("\r\n");
      out.write("    \r\n");
      out.write("    const itemsPerPage = 10;\r\n");
      out.write("    let currentPage = 1;\r\n");
      out.write("    let dataItems = ");
      out.print( jsonArray.toString() );
      out.write(";\r\n");
      out.write("    let filteredItems = dataItems;\r\n");
      out.write("\r\n");
      out.write("    function renderPage(page) {\r\n");
      out.write("      const list = document.getElementById('accommodation-list');\r\n");
      out.write("      \r\n");
      out.write("      if (filteredItems.length === 0) {\r\n");
      out.write("        list.innerHTML = '<div class=\"loading\">검색 결과가 없습니다.</div>';\r\n");
      out.write("        return;\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      list.innerHTML = '';\r\n");
      out.write("\r\n");
      out.write("      const startIndex = (page - 1) * itemsPerPage;\r\n");
      out.write("      const endIndex = startIndex + itemsPerPage;\r\n");
      out.write("      const pageItems = filteredItems.slice(startIndex, endIndex);\r\n");
      out.write("\r\n");
      out.write("      pageItems.forEach(item => {\r\n");
      out.write("        const card = document.createElement('div');\r\n");
      out.write("        card.className = 'card';\r\n");
      out.write("\r\n");
      out.write("        const imageHtml = item.firstimage ? \r\n");
      out.write("          `<div class=\"card-image\"><img src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.firstimage}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" alt=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.title}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" onerror=\"this.parentElement.innerHTML='<div class=\\\\'no-image\\\\'>이미지 없음</div>'\"></div>` :\r\n");
      out.write("          '<div class=\"card-image\"><div class=\"no-image\">이미지 없음</div></div>';\r\n");
      out.write("\r\n");
      out.write("        const title = `<div class=\"card-title\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.title || '제목 없음'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</div>`;\r\n");
      out.write("        const address = `<p><strong>📍 주소:</strong> ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.addr1 || '주소 정보 없음'}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>`;\r\n");
      out.write("        const phone = item.tel ? `<p><strong>📞 전화:</strong> ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${item.tel}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>` : '';\r\n");
      out.write("\r\n");
      out.write("        card.innerHTML = imageHtml + \r\n");
      out.write("          `<div class=\"card-content\">\r\n");
      out.write("            ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${title}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("            <div class=\"card-info\">\r\n");
      out.write("              ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${address}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("              ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${phone}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\r\n");
      out.write("            </div>\r\n");
      out.write("          </div>`;\r\n");
      out.write("        \r\n");
      out.write("        list.appendChild(card);\r\n");
      out.write("      });\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function setupPagination(totalItems) {\r\n");
      out.write("      const pagination = document.getElementById('pagination');\r\n");
      out.write("      pagination.innerHTML = '';\r\n");
      out.write("\r\n");
      out.write("      if (totalItems === 0) return;\r\n");
      out.write("\r\n");
      out.write("      const pageCount = Math.ceil(totalItems / itemsPerPage);\r\n");
      out.write("      \r\n");
      out.write("      // 이전 버튼\r\n");
      out.write("      if (currentPage > 1) {\r\n");
      out.write("        const prevBtn = document.createElement('button');\r\n");
      out.write("        prevBtn.textContent = '« 이전';\r\n");
      out.write("        prevBtn.onclick = () => goToPage(currentPage - 1);\r\n");
      out.write("        pagination.appendChild(prevBtn);\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      // 페이지 번호 버튼\r\n");
      out.write("      const startPage = Math.max(1, currentPage - 2);\r\n");
      out.write("      const endPage = Math.min(pageCount, currentPage + 2);\r\n");
      out.write("\r\n");
      out.write("      for (let i = startPage; i <= endPage; i++) {\r\n");
      out.write("        const btn = document.createElement('button');\r\n");
      out.write("        btn.textContent = i;\r\n");
      out.write("        btn.onclick = () => goToPage(i);\r\n");
      out.write("        if (i === currentPage) {\r\n");
      out.write("          btn.classList.add('active');\r\n");
      out.write("        }\r\n");
      out.write("        pagination.appendChild(btn);\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      // 다음 버튼\r\n");
      out.write("      if (currentPage < pageCount) {\r\n");
      out.write("        const nextBtn = document.createElement('button');\r\n");
      out.write("        nextBtn.textContent = '다음 »';\r\n");
      out.write("        nextBtn.onclick = () => goToPage(currentPage + 1);\r\n");
      out.write("        pagination.appendChild(nextBtn);\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function goToPage(page) {\r\n");
      out.write("      currentPage = page;\r\n");
      out.write("      renderPage(currentPage);\r\n");
      out.write("      setupPagination(filteredItems.length);\r\n");
      out.write("      window.scrollTo(0, 0);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function searchAccommodation() {\r\n");
      out.write("      const keyword = document.getElementById('searchInput').value.trim();\r\n");
      out.write("      if (keyword) {\r\n");
      out.write("        filteredItems = dataItems.filter(item => \r\n");
      out.write("          (item.title && item.title.toLowerCase().includes(keyword.toLowerCase())) ||\r\n");
      out.write("          (item.addr1 && item.addr1.toLowerCase().includes(keyword.toLowerCase()))\r\n");
      out.write("        );\r\n");
      out.write("      } else {\r\n");
      out.write("        filteredItems = dataItems;\r\n");
      out.write("      }\r\n");
      out.write("      currentPage = 1;\r\n");
      out.write("      renderPage(currentPage);\r\n");
      out.write("      setupPagination(filteredItems.length);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function resetSearch() {\r\n");
      out.write("      document.getElementById('searchInput').value = '';\r\n");
      out.write("      filteredItems = dataItems;\r\n");
      out.write("      currentPage = 1;\r\n");
      out.write("      renderPage(currentPage);\r\n");
      out.write("      setupPagination(filteredItems.length);\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    function handleEnter(event) {\r\n");
      out.write("      if (event.key === 'Enter') {\r\n");
      out.write("        searchAccommodation();\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 페이지 로드 시 초기화\r\n");
      out.write("    window.onload = function() {\r\n");
      out.write("      if (dataItems && dataItems.length > 0) {\r\n");
      out.write("        setupPagination(dataItems.length);\r\n");
      out.write("        renderPage(currentPage);\r\n");
      out.write("      } else {\r\n");
      out.write("        document.getElementById('accommodation-list').innerHTML = '<div class=\"loading\">표시할 숙박 정보가 없습니다.</div>';\r\n");
      out.write("      }\r\n");
      out.write("    };\r\n");
      out.write("  </script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
