package controler;


import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import dto.HotelDTO;

//"/hotelList" URL 요청을 이 서블릿이 처리하도록 매핑합니다.
@WebServlet("/hotelList")
public class HotelListServlet extends HttpServlet {
 private static final long serialVersionUID = 1L;

 protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
     // 1. 요청 파라미터 확인 (예: 검색어)
     String keyword = request.getParameter("keyword");
     if (keyword != null && !keyword.trim().isEmpty()) {
         System.out.println("검색어: " + keyword);
         // TODO: 실제로는 keyword를 사용하여 DB에서 검색하는 로직이 필요합니다.
     }

     // 2. 숙소 목록 데이터 생성 (지금은 임시 데이터 사용)
     List<Hotel> hotelList = new ArrayList<>();
     hotelList.add(new Hotel("H001", "천안 럭셔리 호텔", "천안시 동남구", 4.8, "수영장, 조식, Wifi", 200000));
     hotelList.add(new Hotel("H002", "아늑한 천안 펜션", "천안시 서북구", 4.5, "바베큐, 주차장", 120000));
     hotelList.add(new Hotel("H003", "비즈니스 호텔 천안", "천안시 동남구", 4.2, "회의실, Wifi", 150000));
     // ... 더 많은 임시 데이터 추가 가능

     // 3. JSP로 전달할 데이터를 request 객체에 속성으로 저장
     request.setAttribute("hotelList", hotelList);

     // 4. hotel_list.jsp 페이지로 포워딩
     RequestDispatcher dispatcher = request.getRequestDispatcher("/hotel_list.jsp"); // 실제 JSP 파일 경로
     dispatcher.forward(request, response);
 }

 protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
     // POST 요청도 GET과 동일하게 처리 (검색 폼이 GET 방식이므로 주로 doGet 사용)
     doGet(request, response);
 }
}
